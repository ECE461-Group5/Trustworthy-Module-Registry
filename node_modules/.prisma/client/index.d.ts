
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Package
 * 
 */
export type Package = $Result.DefaultSelection<Prisma.$PackagePayload>
/**
 * Model PackageRating
 * 
 */
export type PackageRating = $Result.DefaultSelection<Prisma.$PackageRatingPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Packages
 * const packages = await prisma.package.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Packages
   * const packages = await prisma.package.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.package`: Exposes CRUD operations for the **Package** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Packages
    * const packages = await prisma.package.findMany()
    * ```
    */
  get package(): Prisma.PackageDelegate<ExtArgs>;

  /**
   * `prisma.packageRating`: Exposes CRUD operations for the **PackageRating** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PackageRatings
    * const packageRatings = await prisma.packageRating.findMany()
    * ```
    */
  get packageRating(): Prisma.PackageRatingDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Package: 'Package',
    PackageRating: 'PackageRating'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "package" | "packageRating"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Package: {
        payload: Prisma.$PackagePayload<ExtArgs>
        fields: Prisma.PackageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PackageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PackageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagePayload>
          }
          findFirst: {
            args: Prisma.PackageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PackageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagePayload>
          }
          findMany: {
            args: Prisma.PackageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagePayload>[]
          }
          create: {
            args: Prisma.PackageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagePayload>
          }
          createMany: {
            args: Prisma.PackageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PackageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagePayload>[]
          }
          delete: {
            args: Prisma.PackageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagePayload>
          }
          update: {
            args: Prisma.PackageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagePayload>
          }
          deleteMany: {
            args: Prisma.PackageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PackageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PackageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagePayload>
          }
          aggregate: {
            args: Prisma.PackageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePackage>
          }
          groupBy: {
            args: Prisma.PackageGroupByArgs<ExtArgs>
            result: $Utils.Optional<PackageGroupByOutputType>[]
          }
          count: {
            args: Prisma.PackageCountArgs<ExtArgs>
            result: $Utils.Optional<PackageCountAggregateOutputType> | number
          }
        }
      }
      PackageRating: {
        payload: Prisma.$PackageRatingPayload<ExtArgs>
        fields: Prisma.PackageRatingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PackageRatingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackageRatingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PackageRatingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackageRatingPayload>
          }
          findFirst: {
            args: Prisma.PackageRatingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackageRatingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PackageRatingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackageRatingPayload>
          }
          findMany: {
            args: Prisma.PackageRatingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackageRatingPayload>[]
          }
          create: {
            args: Prisma.PackageRatingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackageRatingPayload>
          }
          createMany: {
            args: Prisma.PackageRatingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PackageRatingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackageRatingPayload>[]
          }
          delete: {
            args: Prisma.PackageRatingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackageRatingPayload>
          }
          update: {
            args: Prisma.PackageRatingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackageRatingPayload>
          }
          deleteMany: {
            args: Prisma.PackageRatingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PackageRatingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PackageRatingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackageRatingPayload>
          }
          aggregate: {
            args: Prisma.PackageRatingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePackageRating>
          }
          groupBy: {
            args: Prisma.PackageRatingGroupByArgs<ExtArgs>
            result: $Utils.Optional<PackageRatingGroupByOutputType>[]
          }
          count: {
            args: Prisma.PackageRatingCountArgs<ExtArgs>
            result: $Utils.Optional<PackageRatingCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type PackageCountOutputType
   */

  export type PackageCountOutputType = {
    ratings: number
  }

  export type PackageCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ratings?: boolean | PackageCountOutputTypeCountRatingsArgs
  }

  // Custom InputTypes
  /**
   * PackageCountOutputType without action
   */
  export type PackageCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackageCountOutputType
     */
    select?: PackageCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PackageCountOutputType without action
   */
  export type PackageCountOutputTypeCountRatingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PackageRatingWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Package
   */

  export type AggregatePackage = {
    _count: PackageCountAggregateOutputType | null
    _avg: PackageAvgAggregateOutputType | null
    _sum: PackageSumAggregateOutputType | null
    _min: PackageMinAggregateOutputType | null
    _max: PackageMaxAggregateOutputType | null
  }

  export type PackageAvgAggregateOutputType = {
    id: number | null
  }

  export type PackageSumAggregateOutputType = {
    id: number | null
  }

  export type PackageMinAggregateOutputType = {
    id: number | null
    name: string | null
    version: string | null
    content: Buffer | null
    url: string | null
    debloat: boolean | null
    jsProgram: string | null
  }

  export type PackageMaxAggregateOutputType = {
    id: number | null
    name: string | null
    version: string | null
    content: Buffer | null
    url: string | null
    debloat: boolean | null
    jsProgram: string | null
  }

  export type PackageCountAggregateOutputType = {
    id: number
    name: number
    version: number
    content: number
    url: number
    debloat: number
    jsProgram: number
    _all: number
  }


  export type PackageAvgAggregateInputType = {
    id?: true
  }

  export type PackageSumAggregateInputType = {
    id?: true
  }

  export type PackageMinAggregateInputType = {
    id?: true
    name?: true
    version?: true
    content?: true
    url?: true
    debloat?: true
    jsProgram?: true
  }

  export type PackageMaxAggregateInputType = {
    id?: true
    name?: true
    version?: true
    content?: true
    url?: true
    debloat?: true
    jsProgram?: true
  }

  export type PackageCountAggregateInputType = {
    id?: true
    name?: true
    version?: true
    content?: true
    url?: true
    debloat?: true
    jsProgram?: true
    _all?: true
  }

  export type PackageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Package to aggregate.
     */
    where?: PackageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Packages to fetch.
     */
    orderBy?: PackageOrderByWithRelationInput | PackageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PackageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Packages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Packages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Packages
    **/
    _count?: true | PackageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PackageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PackageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PackageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PackageMaxAggregateInputType
  }

  export type GetPackageAggregateType<T extends PackageAggregateArgs> = {
        [P in keyof T & keyof AggregatePackage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePackage[P]>
      : GetScalarType<T[P], AggregatePackage[P]>
  }




  export type PackageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PackageWhereInput
    orderBy?: PackageOrderByWithAggregationInput | PackageOrderByWithAggregationInput[]
    by: PackageScalarFieldEnum[] | PackageScalarFieldEnum
    having?: PackageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PackageCountAggregateInputType | true
    _avg?: PackageAvgAggregateInputType
    _sum?: PackageSumAggregateInputType
    _min?: PackageMinAggregateInputType
    _max?: PackageMaxAggregateInputType
  }

  export type PackageGroupByOutputType = {
    id: number
    name: string
    version: string
    content: Buffer | null
    url: string | null
    debloat: boolean | null
    jsProgram: string | null
    _count: PackageCountAggregateOutputType | null
    _avg: PackageAvgAggregateOutputType | null
    _sum: PackageSumAggregateOutputType | null
    _min: PackageMinAggregateOutputType | null
    _max: PackageMaxAggregateOutputType | null
  }

  type GetPackageGroupByPayload<T extends PackageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PackageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PackageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PackageGroupByOutputType[P]>
            : GetScalarType<T[P], PackageGroupByOutputType[P]>
        }
      >
    >


  export type PackageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    version?: boolean
    content?: boolean
    url?: boolean
    debloat?: boolean
    jsProgram?: boolean
    ratings?: boolean | Package$ratingsArgs<ExtArgs>
    _count?: boolean | PackageCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["package"]>

  export type PackageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    version?: boolean
    content?: boolean
    url?: boolean
    debloat?: boolean
    jsProgram?: boolean
  }, ExtArgs["result"]["package"]>

  export type PackageSelectScalar = {
    id?: boolean
    name?: boolean
    version?: boolean
    content?: boolean
    url?: boolean
    debloat?: boolean
    jsProgram?: boolean
  }

  export type PackageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ratings?: boolean | Package$ratingsArgs<ExtArgs>
    _count?: boolean | PackageCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PackageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $PackagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Package"
    objects: {
      ratings: Prisma.$PackageRatingPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      version: string
      content: Buffer | null
      url: string | null
      debloat: boolean | null
      jsProgram: string | null
    }, ExtArgs["result"]["package"]>
    composites: {}
  }

  type PackageGetPayload<S extends boolean | null | undefined | PackageDefaultArgs> = $Result.GetResult<Prisma.$PackagePayload, S>

  type PackageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PackageFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PackageCountAggregateInputType | true
    }

  export interface PackageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Package'], meta: { name: 'Package' } }
    /**
     * Find zero or one Package that matches the filter.
     * @param {PackageFindUniqueArgs} args - Arguments to find a Package
     * @example
     * // Get one Package
     * const package = await prisma.package.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PackageFindUniqueArgs>(args: SelectSubset<T, PackageFindUniqueArgs<ExtArgs>>): Prisma__PackageClient<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Package that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PackageFindUniqueOrThrowArgs} args - Arguments to find a Package
     * @example
     * // Get one Package
     * const package = await prisma.package.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PackageFindUniqueOrThrowArgs>(args: SelectSubset<T, PackageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PackageClient<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Package that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageFindFirstArgs} args - Arguments to find a Package
     * @example
     * // Get one Package
     * const package = await prisma.package.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PackageFindFirstArgs>(args?: SelectSubset<T, PackageFindFirstArgs<ExtArgs>>): Prisma__PackageClient<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Package that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageFindFirstOrThrowArgs} args - Arguments to find a Package
     * @example
     * // Get one Package
     * const package = await prisma.package.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PackageFindFirstOrThrowArgs>(args?: SelectSubset<T, PackageFindFirstOrThrowArgs<ExtArgs>>): Prisma__PackageClient<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Packages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Packages
     * const packages = await prisma.package.findMany()
     * 
     * // Get first 10 Packages
     * const packages = await prisma.package.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const packageWithIdOnly = await prisma.package.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PackageFindManyArgs>(args?: SelectSubset<T, PackageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Package.
     * @param {PackageCreateArgs} args - Arguments to create a Package.
     * @example
     * // Create one Package
     * const Package = await prisma.package.create({
     *   data: {
     *     // ... data to create a Package
     *   }
     * })
     * 
     */
    create<T extends PackageCreateArgs>(args: SelectSubset<T, PackageCreateArgs<ExtArgs>>): Prisma__PackageClient<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Packages.
     * @param {PackageCreateManyArgs} args - Arguments to create many Packages.
     * @example
     * // Create many Packages
     * const package = await prisma.package.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PackageCreateManyArgs>(args?: SelectSubset<T, PackageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Packages and returns the data saved in the database.
     * @param {PackageCreateManyAndReturnArgs} args - Arguments to create many Packages.
     * @example
     * // Create many Packages
     * const package = await prisma.package.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Packages and only return the `id`
     * const packageWithIdOnly = await prisma.package.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PackageCreateManyAndReturnArgs>(args?: SelectSubset<T, PackageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Package.
     * @param {PackageDeleteArgs} args - Arguments to delete one Package.
     * @example
     * // Delete one Package
     * const Package = await prisma.package.delete({
     *   where: {
     *     // ... filter to delete one Package
     *   }
     * })
     * 
     */
    delete<T extends PackageDeleteArgs>(args: SelectSubset<T, PackageDeleteArgs<ExtArgs>>): Prisma__PackageClient<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Package.
     * @param {PackageUpdateArgs} args - Arguments to update one Package.
     * @example
     * // Update one Package
     * const package = await prisma.package.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PackageUpdateArgs>(args: SelectSubset<T, PackageUpdateArgs<ExtArgs>>): Prisma__PackageClient<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Packages.
     * @param {PackageDeleteManyArgs} args - Arguments to filter Packages to delete.
     * @example
     * // Delete a few Packages
     * const { count } = await prisma.package.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PackageDeleteManyArgs>(args?: SelectSubset<T, PackageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Packages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Packages
     * const package = await prisma.package.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PackageUpdateManyArgs>(args: SelectSubset<T, PackageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Package.
     * @param {PackageUpsertArgs} args - Arguments to update or create a Package.
     * @example
     * // Update or create a Package
     * const package = await prisma.package.upsert({
     *   create: {
     *     // ... data to create a Package
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Package we want to update
     *   }
     * })
     */
    upsert<T extends PackageUpsertArgs>(args: SelectSubset<T, PackageUpsertArgs<ExtArgs>>): Prisma__PackageClient<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Packages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageCountArgs} args - Arguments to filter Packages to count.
     * @example
     * // Count the number of Packages
     * const count = await prisma.package.count({
     *   where: {
     *     // ... the filter for the Packages we want to count
     *   }
     * })
    **/
    count<T extends PackageCountArgs>(
      args?: Subset<T, PackageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PackageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Package.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PackageAggregateArgs>(args: Subset<T, PackageAggregateArgs>): Prisma.PrismaPromise<GetPackageAggregateType<T>>

    /**
     * Group by Package.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PackageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PackageGroupByArgs['orderBy'] }
        : { orderBy?: PackageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PackageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPackageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Package model
   */
  readonly fields: PackageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Package.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PackageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    ratings<T extends Package$ratingsArgs<ExtArgs> = {}>(args?: Subset<T, Package$ratingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PackageRatingPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Package model
   */ 
  interface PackageFieldRefs {
    readonly id: FieldRef<"Package", 'Int'>
    readonly name: FieldRef<"Package", 'String'>
    readonly version: FieldRef<"Package", 'String'>
    readonly content: FieldRef<"Package", 'Bytes'>
    readonly url: FieldRef<"Package", 'String'>
    readonly debloat: FieldRef<"Package", 'Boolean'>
    readonly jsProgram: FieldRef<"Package", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Package findUnique
   */
  export type PackageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
    /**
     * Filter, which Package to fetch.
     */
    where: PackageWhereUniqueInput
  }

  /**
   * Package findUniqueOrThrow
   */
  export type PackageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
    /**
     * Filter, which Package to fetch.
     */
    where: PackageWhereUniqueInput
  }

  /**
   * Package findFirst
   */
  export type PackageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
    /**
     * Filter, which Package to fetch.
     */
    where?: PackageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Packages to fetch.
     */
    orderBy?: PackageOrderByWithRelationInput | PackageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Packages.
     */
    cursor?: PackageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Packages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Packages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Packages.
     */
    distinct?: PackageScalarFieldEnum | PackageScalarFieldEnum[]
  }

  /**
   * Package findFirstOrThrow
   */
  export type PackageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
    /**
     * Filter, which Package to fetch.
     */
    where?: PackageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Packages to fetch.
     */
    orderBy?: PackageOrderByWithRelationInput | PackageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Packages.
     */
    cursor?: PackageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Packages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Packages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Packages.
     */
    distinct?: PackageScalarFieldEnum | PackageScalarFieldEnum[]
  }

  /**
   * Package findMany
   */
  export type PackageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
    /**
     * Filter, which Packages to fetch.
     */
    where?: PackageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Packages to fetch.
     */
    orderBy?: PackageOrderByWithRelationInput | PackageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Packages.
     */
    cursor?: PackageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Packages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Packages.
     */
    skip?: number
    distinct?: PackageScalarFieldEnum | PackageScalarFieldEnum[]
  }

  /**
   * Package create
   */
  export type PackageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
    /**
     * The data needed to create a Package.
     */
    data: XOR<PackageCreateInput, PackageUncheckedCreateInput>
  }

  /**
   * Package createMany
   */
  export type PackageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Packages.
     */
    data: PackageCreateManyInput | PackageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Package createManyAndReturn
   */
  export type PackageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Packages.
     */
    data: PackageCreateManyInput | PackageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Package update
   */
  export type PackageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
    /**
     * The data needed to update a Package.
     */
    data: XOR<PackageUpdateInput, PackageUncheckedUpdateInput>
    /**
     * Choose, which Package to update.
     */
    where: PackageWhereUniqueInput
  }

  /**
   * Package updateMany
   */
  export type PackageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Packages.
     */
    data: XOR<PackageUpdateManyMutationInput, PackageUncheckedUpdateManyInput>
    /**
     * Filter which Packages to update
     */
    where?: PackageWhereInput
  }

  /**
   * Package upsert
   */
  export type PackageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
    /**
     * The filter to search for the Package to update in case it exists.
     */
    where: PackageWhereUniqueInput
    /**
     * In case the Package found by the `where` argument doesn't exist, create a new Package with this data.
     */
    create: XOR<PackageCreateInput, PackageUncheckedCreateInput>
    /**
     * In case the Package was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PackageUpdateInput, PackageUncheckedUpdateInput>
  }

  /**
   * Package delete
   */
  export type PackageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
    /**
     * Filter which Package to delete.
     */
    where: PackageWhereUniqueInput
  }

  /**
   * Package deleteMany
   */
  export type PackageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Packages to delete
     */
    where?: PackageWhereInput
  }

  /**
   * Package.ratings
   */
  export type Package$ratingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackageRating
     */
    select?: PackageRatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageRatingInclude<ExtArgs> | null
    where?: PackageRatingWhereInput
    orderBy?: PackageRatingOrderByWithRelationInput | PackageRatingOrderByWithRelationInput[]
    cursor?: PackageRatingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PackageRatingScalarFieldEnum | PackageRatingScalarFieldEnum[]
  }

  /**
   * Package without action
   */
  export type PackageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
  }


  /**
   * Model PackageRating
   */

  export type AggregatePackageRating = {
    _count: PackageRatingCountAggregateOutputType | null
    _avg: PackageRatingAvgAggregateOutputType | null
    _sum: PackageRatingSumAggregateOutputType | null
    _min: PackageRatingMinAggregateOutputType | null
    _max: PackageRatingMaxAggregateOutputType | null
  }

  export type PackageRatingAvgAggregateOutputType = {
    id: number | null
    packageId: number | null
    rampUp: number | null
    correctness: number | null
    busFactor: number | null
    responsiveMaintainer: number | null
    licenseScore: number | null
    netScore: number | null
    rampUpLatency: number | null
    correctnessLatency: number | null
    busFactorLatency: number | null
    responsiveMaintainerLatency: number | null
    licenseScoreLatency: number | null
    netScoreLatency: number | null
  }

  export type PackageRatingSumAggregateOutputType = {
    id: number | null
    packageId: number | null
    rampUp: number | null
    correctness: number | null
    busFactor: number | null
    responsiveMaintainer: number | null
    licenseScore: number | null
    netScore: number | null
    rampUpLatency: number | null
    correctnessLatency: number | null
    busFactorLatency: number | null
    responsiveMaintainerLatency: number | null
    licenseScoreLatency: number | null
    netScoreLatency: number | null
  }

  export type PackageRatingMinAggregateOutputType = {
    id: number | null
    packageId: number | null
    rampUp: number | null
    correctness: number | null
    busFactor: number | null
    responsiveMaintainer: number | null
    licenseScore: number | null
    netScore: number | null
    rampUpLatency: number | null
    correctnessLatency: number | null
    busFactorLatency: number | null
    responsiveMaintainerLatency: number | null
    licenseScoreLatency: number | null
    netScoreLatency: number | null
  }

  export type PackageRatingMaxAggregateOutputType = {
    id: number | null
    packageId: number | null
    rampUp: number | null
    correctness: number | null
    busFactor: number | null
    responsiveMaintainer: number | null
    licenseScore: number | null
    netScore: number | null
    rampUpLatency: number | null
    correctnessLatency: number | null
    busFactorLatency: number | null
    responsiveMaintainerLatency: number | null
    licenseScoreLatency: number | null
    netScoreLatency: number | null
  }

  export type PackageRatingCountAggregateOutputType = {
    id: number
    packageId: number
    rampUp: number
    correctness: number
    busFactor: number
    responsiveMaintainer: number
    licenseScore: number
    netScore: number
    rampUpLatency: number
    correctnessLatency: number
    busFactorLatency: number
    responsiveMaintainerLatency: number
    licenseScoreLatency: number
    netScoreLatency: number
    _all: number
  }


  export type PackageRatingAvgAggregateInputType = {
    id?: true
    packageId?: true
    rampUp?: true
    correctness?: true
    busFactor?: true
    responsiveMaintainer?: true
    licenseScore?: true
    netScore?: true
    rampUpLatency?: true
    correctnessLatency?: true
    busFactorLatency?: true
    responsiveMaintainerLatency?: true
    licenseScoreLatency?: true
    netScoreLatency?: true
  }

  export type PackageRatingSumAggregateInputType = {
    id?: true
    packageId?: true
    rampUp?: true
    correctness?: true
    busFactor?: true
    responsiveMaintainer?: true
    licenseScore?: true
    netScore?: true
    rampUpLatency?: true
    correctnessLatency?: true
    busFactorLatency?: true
    responsiveMaintainerLatency?: true
    licenseScoreLatency?: true
    netScoreLatency?: true
  }

  export type PackageRatingMinAggregateInputType = {
    id?: true
    packageId?: true
    rampUp?: true
    correctness?: true
    busFactor?: true
    responsiveMaintainer?: true
    licenseScore?: true
    netScore?: true
    rampUpLatency?: true
    correctnessLatency?: true
    busFactorLatency?: true
    responsiveMaintainerLatency?: true
    licenseScoreLatency?: true
    netScoreLatency?: true
  }

  export type PackageRatingMaxAggregateInputType = {
    id?: true
    packageId?: true
    rampUp?: true
    correctness?: true
    busFactor?: true
    responsiveMaintainer?: true
    licenseScore?: true
    netScore?: true
    rampUpLatency?: true
    correctnessLatency?: true
    busFactorLatency?: true
    responsiveMaintainerLatency?: true
    licenseScoreLatency?: true
    netScoreLatency?: true
  }

  export type PackageRatingCountAggregateInputType = {
    id?: true
    packageId?: true
    rampUp?: true
    correctness?: true
    busFactor?: true
    responsiveMaintainer?: true
    licenseScore?: true
    netScore?: true
    rampUpLatency?: true
    correctnessLatency?: true
    busFactorLatency?: true
    responsiveMaintainerLatency?: true
    licenseScoreLatency?: true
    netScoreLatency?: true
    _all?: true
  }

  export type PackageRatingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PackageRating to aggregate.
     */
    where?: PackageRatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PackageRatings to fetch.
     */
    orderBy?: PackageRatingOrderByWithRelationInput | PackageRatingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PackageRatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PackageRatings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PackageRatings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PackageRatings
    **/
    _count?: true | PackageRatingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PackageRatingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PackageRatingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PackageRatingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PackageRatingMaxAggregateInputType
  }

  export type GetPackageRatingAggregateType<T extends PackageRatingAggregateArgs> = {
        [P in keyof T & keyof AggregatePackageRating]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePackageRating[P]>
      : GetScalarType<T[P], AggregatePackageRating[P]>
  }




  export type PackageRatingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PackageRatingWhereInput
    orderBy?: PackageRatingOrderByWithAggregationInput | PackageRatingOrderByWithAggregationInput[]
    by: PackageRatingScalarFieldEnum[] | PackageRatingScalarFieldEnum
    having?: PackageRatingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PackageRatingCountAggregateInputType | true
    _avg?: PackageRatingAvgAggregateInputType
    _sum?: PackageRatingSumAggregateInputType
    _min?: PackageRatingMinAggregateInputType
    _max?: PackageRatingMaxAggregateInputType
  }

  export type PackageRatingGroupByOutputType = {
    id: number
    packageId: number
    rampUp: number
    correctness: number
    busFactor: number
    responsiveMaintainer: number
    licenseScore: number
    netScore: number
    rampUpLatency: number | null
    correctnessLatency: number | null
    busFactorLatency: number | null
    responsiveMaintainerLatency: number | null
    licenseScoreLatency: number | null
    netScoreLatency: number | null
    _count: PackageRatingCountAggregateOutputType | null
    _avg: PackageRatingAvgAggregateOutputType | null
    _sum: PackageRatingSumAggregateOutputType | null
    _min: PackageRatingMinAggregateOutputType | null
    _max: PackageRatingMaxAggregateOutputType | null
  }

  type GetPackageRatingGroupByPayload<T extends PackageRatingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PackageRatingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PackageRatingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PackageRatingGroupByOutputType[P]>
            : GetScalarType<T[P], PackageRatingGroupByOutputType[P]>
        }
      >
    >


  export type PackageRatingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    packageId?: boolean
    rampUp?: boolean
    correctness?: boolean
    busFactor?: boolean
    responsiveMaintainer?: boolean
    licenseScore?: boolean
    netScore?: boolean
    rampUpLatency?: boolean
    correctnessLatency?: boolean
    busFactorLatency?: boolean
    responsiveMaintainerLatency?: boolean
    licenseScoreLatency?: boolean
    netScoreLatency?: boolean
    package?: boolean | PackageDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["packageRating"]>

  export type PackageRatingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    packageId?: boolean
    rampUp?: boolean
    correctness?: boolean
    busFactor?: boolean
    responsiveMaintainer?: boolean
    licenseScore?: boolean
    netScore?: boolean
    rampUpLatency?: boolean
    correctnessLatency?: boolean
    busFactorLatency?: boolean
    responsiveMaintainerLatency?: boolean
    licenseScoreLatency?: boolean
    netScoreLatency?: boolean
    package?: boolean | PackageDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["packageRating"]>

  export type PackageRatingSelectScalar = {
    id?: boolean
    packageId?: boolean
    rampUp?: boolean
    correctness?: boolean
    busFactor?: boolean
    responsiveMaintainer?: boolean
    licenseScore?: boolean
    netScore?: boolean
    rampUpLatency?: boolean
    correctnessLatency?: boolean
    busFactorLatency?: boolean
    responsiveMaintainerLatency?: boolean
    licenseScoreLatency?: boolean
    netScoreLatency?: boolean
  }

  export type PackageRatingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    package?: boolean | PackageDefaultArgs<ExtArgs>
  }
  export type PackageRatingIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    package?: boolean | PackageDefaultArgs<ExtArgs>
  }

  export type $PackageRatingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PackageRating"
    objects: {
      package: Prisma.$PackagePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      packageId: number
      rampUp: number
      correctness: number
      busFactor: number
      responsiveMaintainer: number
      licenseScore: number
      netScore: number
      rampUpLatency: number | null
      correctnessLatency: number | null
      busFactorLatency: number | null
      responsiveMaintainerLatency: number | null
      licenseScoreLatency: number | null
      netScoreLatency: number | null
    }, ExtArgs["result"]["packageRating"]>
    composites: {}
  }

  type PackageRatingGetPayload<S extends boolean | null | undefined | PackageRatingDefaultArgs> = $Result.GetResult<Prisma.$PackageRatingPayload, S>

  type PackageRatingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PackageRatingFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PackageRatingCountAggregateInputType | true
    }

  export interface PackageRatingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PackageRating'], meta: { name: 'PackageRating' } }
    /**
     * Find zero or one PackageRating that matches the filter.
     * @param {PackageRatingFindUniqueArgs} args - Arguments to find a PackageRating
     * @example
     * // Get one PackageRating
     * const packageRating = await prisma.packageRating.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PackageRatingFindUniqueArgs>(args: SelectSubset<T, PackageRatingFindUniqueArgs<ExtArgs>>): Prisma__PackageRatingClient<$Result.GetResult<Prisma.$PackageRatingPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PackageRating that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PackageRatingFindUniqueOrThrowArgs} args - Arguments to find a PackageRating
     * @example
     * // Get one PackageRating
     * const packageRating = await prisma.packageRating.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PackageRatingFindUniqueOrThrowArgs>(args: SelectSubset<T, PackageRatingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PackageRatingClient<$Result.GetResult<Prisma.$PackageRatingPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PackageRating that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageRatingFindFirstArgs} args - Arguments to find a PackageRating
     * @example
     * // Get one PackageRating
     * const packageRating = await prisma.packageRating.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PackageRatingFindFirstArgs>(args?: SelectSubset<T, PackageRatingFindFirstArgs<ExtArgs>>): Prisma__PackageRatingClient<$Result.GetResult<Prisma.$PackageRatingPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PackageRating that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageRatingFindFirstOrThrowArgs} args - Arguments to find a PackageRating
     * @example
     * // Get one PackageRating
     * const packageRating = await prisma.packageRating.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PackageRatingFindFirstOrThrowArgs>(args?: SelectSubset<T, PackageRatingFindFirstOrThrowArgs<ExtArgs>>): Prisma__PackageRatingClient<$Result.GetResult<Prisma.$PackageRatingPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PackageRatings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageRatingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PackageRatings
     * const packageRatings = await prisma.packageRating.findMany()
     * 
     * // Get first 10 PackageRatings
     * const packageRatings = await prisma.packageRating.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const packageRatingWithIdOnly = await prisma.packageRating.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PackageRatingFindManyArgs>(args?: SelectSubset<T, PackageRatingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PackageRatingPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PackageRating.
     * @param {PackageRatingCreateArgs} args - Arguments to create a PackageRating.
     * @example
     * // Create one PackageRating
     * const PackageRating = await prisma.packageRating.create({
     *   data: {
     *     // ... data to create a PackageRating
     *   }
     * })
     * 
     */
    create<T extends PackageRatingCreateArgs>(args: SelectSubset<T, PackageRatingCreateArgs<ExtArgs>>): Prisma__PackageRatingClient<$Result.GetResult<Prisma.$PackageRatingPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PackageRatings.
     * @param {PackageRatingCreateManyArgs} args - Arguments to create many PackageRatings.
     * @example
     * // Create many PackageRatings
     * const packageRating = await prisma.packageRating.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PackageRatingCreateManyArgs>(args?: SelectSubset<T, PackageRatingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PackageRatings and returns the data saved in the database.
     * @param {PackageRatingCreateManyAndReturnArgs} args - Arguments to create many PackageRatings.
     * @example
     * // Create many PackageRatings
     * const packageRating = await prisma.packageRating.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PackageRatings and only return the `id`
     * const packageRatingWithIdOnly = await prisma.packageRating.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PackageRatingCreateManyAndReturnArgs>(args?: SelectSubset<T, PackageRatingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PackageRatingPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PackageRating.
     * @param {PackageRatingDeleteArgs} args - Arguments to delete one PackageRating.
     * @example
     * // Delete one PackageRating
     * const PackageRating = await prisma.packageRating.delete({
     *   where: {
     *     // ... filter to delete one PackageRating
     *   }
     * })
     * 
     */
    delete<T extends PackageRatingDeleteArgs>(args: SelectSubset<T, PackageRatingDeleteArgs<ExtArgs>>): Prisma__PackageRatingClient<$Result.GetResult<Prisma.$PackageRatingPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PackageRating.
     * @param {PackageRatingUpdateArgs} args - Arguments to update one PackageRating.
     * @example
     * // Update one PackageRating
     * const packageRating = await prisma.packageRating.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PackageRatingUpdateArgs>(args: SelectSubset<T, PackageRatingUpdateArgs<ExtArgs>>): Prisma__PackageRatingClient<$Result.GetResult<Prisma.$PackageRatingPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PackageRatings.
     * @param {PackageRatingDeleteManyArgs} args - Arguments to filter PackageRatings to delete.
     * @example
     * // Delete a few PackageRatings
     * const { count } = await prisma.packageRating.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PackageRatingDeleteManyArgs>(args?: SelectSubset<T, PackageRatingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PackageRatings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageRatingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PackageRatings
     * const packageRating = await prisma.packageRating.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PackageRatingUpdateManyArgs>(args: SelectSubset<T, PackageRatingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PackageRating.
     * @param {PackageRatingUpsertArgs} args - Arguments to update or create a PackageRating.
     * @example
     * // Update or create a PackageRating
     * const packageRating = await prisma.packageRating.upsert({
     *   create: {
     *     // ... data to create a PackageRating
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PackageRating we want to update
     *   }
     * })
     */
    upsert<T extends PackageRatingUpsertArgs>(args: SelectSubset<T, PackageRatingUpsertArgs<ExtArgs>>): Prisma__PackageRatingClient<$Result.GetResult<Prisma.$PackageRatingPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PackageRatings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageRatingCountArgs} args - Arguments to filter PackageRatings to count.
     * @example
     * // Count the number of PackageRatings
     * const count = await prisma.packageRating.count({
     *   where: {
     *     // ... the filter for the PackageRatings we want to count
     *   }
     * })
    **/
    count<T extends PackageRatingCountArgs>(
      args?: Subset<T, PackageRatingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PackageRatingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PackageRating.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageRatingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PackageRatingAggregateArgs>(args: Subset<T, PackageRatingAggregateArgs>): Prisma.PrismaPromise<GetPackageRatingAggregateType<T>>

    /**
     * Group by PackageRating.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageRatingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PackageRatingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PackageRatingGroupByArgs['orderBy'] }
        : { orderBy?: PackageRatingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PackageRatingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPackageRatingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PackageRating model
   */
  readonly fields: PackageRatingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PackageRating.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PackageRatingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    package<T extends PackageDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PackageDefaultArgs<ExtArgs>>): Prisma__PackageClient<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PackageRating model
   */ 
  interface PackageRatingFieldRefs {
    readonly id: FieldRef<"PackageRating", 'Int'>
    readonly packageId: FieldRef<"PackageRating", 'Int'>
    readonly rampUp: FieldRef<"PackageRating", 'Float'>
    readonly correctness: FieldRef<"PackageRating", 'Float'>
    readonly busFactor: FieldRef<"PackageRating", 'Float'>
    readonly responsiveMaintainer: FieldRef<"PackageRating", 'Float'>
    readonly licenseScore: FieldRef<"PackageRating", 'Float'>
    readonly netScore: FieldRef<"PackageRating", 'Float'>
    readonly rampUpLatency: FieldRef<"PackageRating", 'Float'>
    readonly correctnessLatency: FieldRef<"PackageRating", 'Float'>
    readonly busFactorLatency: FieldRef<"PackageRating", 'Float'>
    readonly responsiveMaintainerLatency: FieldRef<"PackageRating", 'Float'>
    readonly licenseScoreLatency: FieldRef<"PackageRating", 'Float'>
    readonly netScoreLatency: FieldRef<"PackageRating", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * PackageRating findUnique
   */
  export type PackageRatingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackageRating
     */
    select?: PackageRatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageRatingInclude<ExtArgs> | null
    /**
     * Filter, which PackageRating to fetch.
     */
    where: PackageRatingWhereUniqueInput
  }

  /**
   * PackageRating findUniqueOrThrow
   */
  export type PackageRatingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackageRating
     */
    select?: PackageRatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageRatingInclude<ExtArgs> | null
    /**
     * Filter, which PackageRating to fetch.
     */
    where: PackageRatingWhereUniqueInput
  }

  /**
   * PackageRating findFirst
   */
  export type PackageRatingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackageRating
     */
    select?: PackageRatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageRatingInclude<ExtArgs> | null
    /**
     * Filter, which PackageRating to fetch.
     */
    where?: PackageRatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PackageRatings to fetch.
     */
    orderBy?: PackageRatingOrderByWithRelationInput | PackageRatingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PackageRatings.
     */
    cursor?: PackageRatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PackageRatings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PackageRatings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PackageRatings.
     */
    distinct?: PackageRatingScalarFieldEnum | PackageRatingScalarFieldEnum[]
  }

  /**
   * PackageRating findFirstOrThrow
   */
  export type PackageRatingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackageRating
     */
    select?: PackageRatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageRatingInclude<ExtArgs> | null
    /**
     * Filter, which PackageRating to fetch.
     */
    where?: PackageRatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PackageRatings to fetch.
     */
    orderBy?: PackageRatingOrderByWithRelationInput | PackageRatingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PackageRatings.
     */
    cursor?: PackageRatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PackageRatings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PackageRatings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PackageRatings.
     */
    distinct?: PackageRatingScalarFieldEnum | PackageRatingScalarFieldEnum[]
  }

  /**
   * PackageRating findMany
   */
  export type PackageRatingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackageRating
     */
    select?: PackageRatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageRatingInclude<ExtArgs> | null
    /**
     * Filter, which PackageRatings to fetch.
     */
    where?: PackageRatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PackageRatings to fetch.
     */
    orderBy?: PackageRatingOrderByWithRelationInput | PackageRatingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PackageRatings.
     */
    cursor?: PackageRatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PackageRatings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PackageRatings.
     */
    skip?: number
    distinct?: PackageRatingScalarFieldEnum | PackageRatingScalarFieldEnum[]
  }

  /**
   * PackageRating create
   */
  export type PackageRatingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackageRating
     */
    select?: PackageRatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageRatingInclude<ExtArgs> | null
    /**
     * The data needed to create a PackageRating.
     */
    data: XOR<PackageRatingCreateInput, PackageRatingUncheckedCreateInput>
  }

  /**
   * PackageRating createMany
   */
  export type PackageRatingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PackageRatings.
     */
    data: PackageRatingCreateManyInput | PackageRatingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PackageRating createManyAndReturn
   */
  export type PackageRatingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackageRating
     */
    select?: PackageRatingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PackageRatings.
     */
    data: PackageRatingCreateManyInput | PackageRatingCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageRatingIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PackageRating update
   */
  export type PackageRatingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackageRating
     */
    select?: PackageRatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageRatingInclude<ExtArgs> | null
    /**
     * The data needed to update a PackageRating.
     */
    data: XOR<PackageRatingUpdateInput, PackageRatingUncheckedUpdateInput>
    /**
     * Choose, which PackageRating to update.
     */
    where: PackageRatingWhereUniqueInput
  }

  /**
   * PackageRating updateMany
   */
  export type PackageRatingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PackageRatings.
     */
    data: XOR<PackageRatingUpdateManyMutationInput, PackageRatingUncheckedUpdateManyInput>
    /**
     * Filter which PackageRatings to update
     */
    where?: PackageRatingWhereInput
  }

  /**
   * PackageRating upsert
   */
  export type PackageRatingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackageRating
     */
    select?: PackageRatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageRatingInclude<ExtArgs> | null
    /**
     * The filter to search for the PackageRating to update in case it exists.
     */
    where: PackageRatingWhereUniqueInput
    /**
     * In case the PackageRating found by the `where` argument doesn't exist, create a new PackageRating with this data.
     */
    create: XOR<PackageRatingCreateInput, PackageRatingUncheckedCreateInput>
    /**
     * In case the PackageRating was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PackageRatingUpdateInput, PackageRatingUncheckedUpdateInput>
  }

  /**
   * PackageRating delete
   */
  export type PackageRatingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackageRating
     */
    select?: PackageRatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageRatingInclude<ExtArgs> | null
    /**
     * Filter which PackageRating to delete.
     */
    where: PackageRatingWhereUniqueInput
  }

  /**
   * PackageRating deleteMany
   */
  export type PackageRatingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PackageRatings to delete
     */
    where?: PackageRatingWhereInput
  }

  /**
   * PackageRating without action
   */
  export type PackageRatingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackageRating
     */
    select?: PackageRatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageRatingInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const PackageScalarFieldEnum: {
    id: 'id',
    name: 'name',
    version: 'version',
    content: 'content',
    url: 'url',
    debloat: 'debloat',
    jsProgram: 'jsProgram'
  };

  export type PackageScalarFieldEnum = (typeof PackageScalarFieldEnum)[keyof typeof PackageScalarFieldEnum]


  export const PackageRatingScalarFieldEnum: {
    id: 'id',
    packageId: 'packageId',
    rampUp: 'rampUp',
    correctness: 'correctness',
    busFactor: 'busFactor',
    responsiveMaintainer: 'responsiveMaintainer',
    licenseScore: 'licenseScore',
    netScore: 'netScore',
    rampUpLatency: 'rampUpLatency',
    correctnessLatency: 'correctnessLatency',
    busFactorLatency: 'busFactorLatency',
    responsiveMaintainerLatency: 'responsiveMaintainerLatency',
    licenseScoreLatency: 'licenseScoreLatency',
    netScoreLatency: 'netScoreLatency'
  };

  export type PackageRatingScalarFieldEnum = (typeof PackageRatingScalarFieldEnum)[keyof typeof PackageRatingScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Bytes'
   */
  export type BytesFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Bytes'>
    


  /**
   * Reference to a field of type 'Bytes[]'
   */
  export type ListBytesFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Bytes[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type PackageWhereInput = {
    AND?: PackageWhereInput | PackageWhereInput[]
    OR?: PackageWhereInput[]
    NOT?: PackageWhereInput | PackageWhereInput[]
    id?: IntFilter<"Package"> | number
    name?: StringFilter<"Package"> | string
    version?: StringFilter<"Package"> | string
    content?: BytesNullableFilter<"Package"> | Buffer | null
    url?: StringNullableFilter<"Package"> | string | null
    debloat?: BoolNullableFilter<"Package"> | boolean | null
    jsProgram?: StringNullableFilter<"Package"> | string | null
    ratings?: PackageRatingListRelationFilter
  }

  export type PackageOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    version?: SortOrder
    content?: SortOrderInput | SortOrder
    url?: SortOrderInput | SortOrder
    debloat?: SortOrderInput | SortOrder
    jsProgram?: SortOrderInput | SortOrder
    ratings?: PackageRatingOrderByRelationAggregateInput
  }

  export type PackageWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PackageWhereInput | PackageWhereInput[]
    OR?: PackageWhereInput[]
    NOT?: PackageWhereInput | PackageWhereInput[]
    name?: StringFilter<"Package"> | string
    version?: StringFilter<"Package"> | string
    content?: BytesNullableFilter<"Package"> | Buffer | null
    url?: StringNullableFilter<"Package"> | string | null
    debloat?: BoolNullableFilter<"Package"> | boolean | null
    jsProgram?: StringNullableFilter<"Package"> | string | null
    ratings?: PackageRatingListRelationFilter
  }, "id">

  export type PackageOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    version?: SortOrder
    content?: SortOrderInput | SortOrder
    url?: SortOrderInput | SortOrder
    debloat?: SortOrderInput | SortOrder
    jsProgram?: SortOrderInput | SortOrder
    _count?: PackageCountOrderByAggregateInput
    _avg?: PackageAvgOrderByAggregateInput
    _max?: PackageMaxOrderByAggregateInput
    _min?: PackageMinOrderByAggregateInput
    _sum?: PackageSumOrderByAggregateInput
  }

  export type PackageScalarWhereWithAggregatesInput = {
    AND?: PackageScalarWhereWithAggregatesInput | PackageScalarWhereWithAggregatesInput[]
    OR?: PackageScalarWhereWithAggregatesInput[]
    NOT?: PackageScalarWhereWithAggregatesInput | PackageScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Package"> | number
    name?: StringWithAggregatesFilter<"Package"> | string
    version?: StringWithAggregatesFilter<"Package"> | string
    content?: BytesNullableWithAggregatesFilter<"Package"> | Buffer | null
    url?: StringNullableWithAggregatesFilter<"Package"> | string | null
    debloat?: BoolNullableWithAggregatesFilter<"Package"> | boolean | null
    jsProgram?: StringNullableWithAggregatesFilter<"Package"> | string | null
  }

  export type PackageRatingWhereInput = {
    AND?: PackageRatingWhereInput | PackageRatingWhereInput[]
    OR?: PackageRatingWhereInput[]
    NOT?: PackageRatingWhereInput | PackageRatingWhereInput[]
    id?: IntFilter<"PackageRating"> | number
    packageId?: IntFilter<"PackageRating"> | number
    rampUp?: FloatFilter<"PackageRating"> | number
    correctness?: FloatFilter<"PackageRating"> | number
    busFactor?: FloatFilter<"PackageRating"> | number
    responsiveMaintainer?: FloatFilter<"PackageRating"> | number
    licenseScore?: FloatFilter<"PackageRating"> | number
    netScore?: FloatFilter<"PackageRating"> | number
    rampUpLatency?: FloatNullableFilter<"PackageRating"> | number | null
    correctnessLatency?: FloatNullableFilter<"PackageRating"> | number | null
    busFactorLatency?: FloatNullableFilter<"PackageRating"> | number | null
    responsiveMaintainerLatency?: FloatNullableFilter<"PackageRating"> | number | null
    licenseScoreLatency?: FloatNullableFilter<"PackageRating"> | number | null
    netScoreLatency?: FloatNullableFilter<"PackageRating"> | number | null
    package?: XOR<PackageRelationFilter, PackageWhereInput>
  }

  export type PackageRatingOrderByWithRelationInput = {
    id?: SortOrder
    packageId?: SortOrder
    rampUp?: SortOrder
    correctness?: SortOrder
    busFactor?: SortOrder
    responsiveMaintainer?: SortOrder
    licenseScore?: SortOrder
    netScore?: SortOrder
    rampUpLatency?: SortOrderInput | SortOrder
    correctnessLatency?: SortOrderInput | SortOrder
    busFactorLatency?: SortOrderInput | SortOrder
    responsiveMaintainerLatency?: SortOrderInput | SortOrder
    licenseScoreLatency?: SortOrderInput | SortOrder
    netScoreLatency?: SortOrderInput | SortOrder
    package?: PackageOrderByWithRelationInput
  }

  export type PackageRatingWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PackageRatingWhereInput | PackageRatingWhereInput[]
    OR?: PackageRatingWhereInput[]
    NOT?: PackageRatingWhereInput | PackageRatingWhereInput[]
    packageId?: IntFilter<"PackageRating"> | number
    rampUp?: FloatFilter<"PackageRating"> | number
    correctness?: FloatFilter<"PackageRating"> | number
    busFactor?: FloatFilter<"PackageRating"> | number
    responsiveMaintainer?: FloatFilter<"PackageRating"> | number
    licenseScore?: FloatFilter<"PackageRating"> | number
    netScore?: FloatFilter<"PackageRating"> | number
    rampUpLatency?: FloatNullableFilter<"PackageRating"> | number | null
    correctnessLatency?: FloatNullableFilter<"PackageRating"> | number | null
    busFactorLatency?: FloatNullableFilter<"PackageRating"> | number | null
    responsiveMaintainerLatency?: FloatNullableFilter<"PackageRating"> | number | null
    licenseScoreLatency?: FloatNullableFilter<"PackageRating"> | number | null
    netScoreLatency?: FloatNullableFilter<"PackageRating"> | number | null
    package?: XOR<PackageRelationFilter, PackageWhereInput>
  }, "id">

  export type PackageRatingOrderByWithAggregationInput = {
    id?: SortOrder
    packageId?: SortOrder
    rampUp?: SortOrder
    correctness?: SortOrder
    busFactor?: SortOrder
    responsiveMaintainer?: SortOrder
    licenseScore?: SortOrder
    netScore?: SortOrder
    rampUpLatency?: SortOrderInput | SortOrder
    correctnessLatency?: SortOrderInput | SortOrder
    busFactorLatency?: SortOrderInput | SortOrder
    responsiveMaintainerLatency?: SortOrderInput | SortOrder
    licenseScoreLatency?: SortOrderInput | SortOrder
    netScoreLatency?: SortOrderInput | SortOrder
    _count?: PackageRatingCountOrderByAggregateInput
    _avg?: PackageRatingAvgOrderByAggregateInput
    _max?: PackageRatingMaxOrderByAggregateInput
    _min?: PackageRatingMinOrderByAggregateInput
    _sum?: PackageRatingSumOrderByAggregateInput
  }

  export type PackageRatingScalarWhereWithAggregatesInput = {
    AND?: PackageRatingScalarWhereWithAggregatesInput | PackageRatingScalarWhereWithAggregatesInput[]
    OR?: PackageRatingScalarWhereWithAggregatesInput[]
    NOT?: PackageRatingScalarWhereWithAggregatesInput | PackageRatingScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PackageRating"> | number
    packageId?: IntWithAggregatesFilter<"PackageRating"> | number
    rampUp?: FloatWithAggregatesFilter<"PackageRating"> | number
    correctness?: FloatWithAggregatesFilter<"PackageRating"> | number
    busFactor?: FloatWithAggregatesFilter<"PackageRating"> | number
    responsiveMaintainer?: FloatWithAggregatesFilter<"PackageRating"> | number
    licenseScore?: FloatWithAggregatesFilter<"PackageRating"> | number
    netScore?: FloatWithAggregatesFilter<"PackageRating"> | number
    rampUpLatency?: FloatNullableWithAggregatesFilter<"PackageRating"> | number | null
    correctnessLatency?: FloatNullableWithAggregatesFilter<"PackageRating"> | number | null
    busFactorLatency?: FloatNullableWithAggregatesFilter<"PackageRating"> | number | null
    responsiveMaintainerLatency?: FloatNullableWithAggregatesFilter<"PackageRating"> | number | null
    licenseScoreLatency?: FloatNullableWithAggregatesFilter<"PackageRating"> | number | null
    netScoreLatency?: FloatNullableWithAggregatesFilter<"PackageRating"> | number | null
  }

  export type PackageCreateInput = {
    name: string
    version: string
    content?: Buffer | null
    url?: string | null
    debloat?: boolean | null
    jsProgram?: string | null
    ratings?: PackageRatingCreateNestedManyWithoutPackageInput
  }

  export type PackageUncheckedCreateInput = {
    id?: number
    name: string
    version: string
    content?: Buffer | null
    url?: string | null
    debloat?: boolean | null
    jsProgram?: string | null
    ratings?: PackageRatingUncheckedCreateNestedManyWithoutPackageInput
  }

  export type PackageUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    content?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    debloat?: NullableBoolFieldUpdateOperationsInput | boolean | null
    jsProgram?: NullableStringFieldUpdateOperationsInput | string | null
    ratings?: PackageRatingUpdateManyWithoutPackageNestedInput
  }

  export type PackageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    content?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    debloat?: NullableBoolFieldUpdateOperationsInput | boolean | null
    jsProgram?: NullableStringFieldUpdateOperationsInput | string | null
    ratings?: PackageRatingUncheckedUpdateManyWithoutPackageNestedInput
  }

  export type PackageCreateManyInput = {
    id?: number
    name: string
    version: string
    content?: Buffer | null
    url?: string | null
    debloat?: boolean | null
    jsProgram?: string | null
  }

  export type PackageUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    content?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    debloat?: NullableBoolFieldUpdateOperationsInput | boolean | null
    jsProgram?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PackageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    content?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    debloat?: NullableBoolFieldUpdateOperationsInput | boolean | null
    jsProgram?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PackageRatingCreateInput = {
    rampUp: number
    correctness: number
    busFactor: number
    responsiveMaintainer: number
    licenseScore: number
    netScore: number
    rampUpLatency?: number | null
    correctnessLatency?: number | null
    busFactorLatency?: number | null
    responsiveMaintainerLatency?: number | null
    licenseScoreLatency?: number | null
    netScoreLatency?: number | null
    package: PackageCreateNestedOneWithoutRatingsInput
  }

  export type PackageRatingUncheckedCreateInput = {
    id?: number
    packageId: number
    rampUp: number
    correctness: number
    busFactor: number
    responsiveMaintainer: number
    licenseScore: number
    netScore: number
    rampUpLatency?: number | null
    correctnessLatency?: number | null
    busFactorLatency?: number | null
    responsiveMaintainerLatency?: number | null
    licenseScoreLatency?: number | null
    netScoreLatency?: number | null
  }

  export type PackageRatingUpdateInput = {
    rampUp?: FloatFieldUpdateOperationsInput | number
    correctness?: FloatFieldUpdateOperationsInput | number
    busFactor?: FloatFieldUpdateOperationsInput | number
    responsiveMaintainer?: FloatFieldUpdateOperationsInput | number
    licenseScore?: FloatFieldUpdateOperationsInput | number
    netScore?: FloatFieldUpdateOperationsInput | number
    rampUpLatency?: NullableFloatFieldUpdateOperationsInput | number | null
    correctnessLatency?: NullableFloatFieldUpdateOperationsInput | number | null
    busFactorLatency?: NullableFloatFieldUpdateOperationsInput | number | null
    responsiveMaintainerLatency?: NullableFloatFieldUpdateOperationsInput | number | null
    licenseScoreLatency?: NullableFloatFieldUpdateOperationsInput | number | null
    netScoreLatency?: NullableFloatFieldUpdateOperationsInput | number | null
    package?: PackageUpdateOneRequiredWithoutRatingsNestedInput
  }

  export type PackageRatingUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    packageId?: IntFieldUpdateOperationsInput | number
    rampUp?: FloatFieldUpdateOperationsInput | number
    correctness?: FloatFieldUpdateOperationsInput | number
    busFactor?: FloatFieldUpdateOperationsInput | number
    responsiveMaintainer?: FloatFieldUpdateOperationsInput | number
    licenseScore?: FloatFieldUpdateOperationsInput | number
    netScore?: FloatFieldUpdateOperationsInput | number
    rampUpLatency?: NullableFloatFieldUpdateOperationsInput | number | null
    correctnessLatency?: NullableFloatFieldUpdateOperationsInput | number | null
    busFactorLatency?: NullableFloatFieldUpdateOperationsInput | number | null
    responsiveMaintainerLatency?: NullableFloatFieldUpdateOperationsInput | number | null
    licenseScoreLatency?: NullableFloatFieldUpdateOperationsInput | number | null
    netScoreLatency?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type PackageRatingCreateManyInput = {
    id?: number
    packageId: number
    rampUp: number
    correctness: number
    busFactor: number
    responsiveMaintainer: number
    licenseScore: number
    netScore: number
    rampUpLatency?: number | null
    correctnessLatency?: number | null
    busFactorLatency?: number | null
    responsiveMaintainerLatency?: number | null
    licenseScoreLatency?: number | null
    netScoreLatency?: number | null
  }

  export type PackageRatingUpdateManyMutationInput = {
    rampUp?: FloatFieldUpdateOperationsInput | number
    correctness?: FloatFieldUpdateOperationsInput | number
    busFactor?: FloatFieldUpdateOperationsInput | number
    responsiveMaintainer?: FloatFieldUpdateOperationsInput | number
    licenseScore?: FloatFieldUpdateOperationsInput | number
    netScore?: FloatFieldUpdateOperationsInput | number
    rampUpLatency?: NullableFloatFieldUpdateOperationsInput | number | null
    correctnessLatency?: NullableFloatFieldUpdateOperationsInput | number | null
    busFactorLatency?: NullableFloatFieldUpdateOperationsInput | number | null
    responsiveMaintainerLatency?: NullableFloatFieldUpdateOperationsInput | number | null
    licenseScoreLatency?: NullableFloatFieldUpdateOperationsInput | number | null
    netScoreLatency?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type PackageRatingUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    packageId?: IntFieldUpdateOperationsInput | number
    rampUp?: FloatFieldUpdateOperationsInput | number
    correctness?: FloatFieldUpdateOperationsInput | number
    busFactor?: FloatFieldUpdateOperationsInput | number
    responsiveMaintainer?: FloatFieldUpdateOperationsInput | number
    licenseScore?: FloatFieldUpdateOperationsInput | number
    netScore?: FloatFieldUpdateOperationsInput | number
    rampUpLatency?: NullableFloatFieldUpdateOperationsInput | number | null
    correctnessLatency?: NullableFloatFieldUpdateOperationsInput | number | null
    busFactorLatency?: NullableFloatFieldUpdateOperationsInput | number | null
    responsiveMaintainerLatency?: NullableFloatFieldUpdateOperationsInput | number | null
    licenseScoreLatency?: NullableFloatFieldUpdateOperationsInput | number | null
    netScoreLatency?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type BytesNullableFilter<$PrismaModel = never> = {
    equals?: Buffer | BytesFieldRefInput<$PrismaModel> | null
    in?: Buffer[] | ListBytesFieldRefInput<$PrismaModel> | null
    notIn?: Buffer[] | ListBytesFieldRefInput<$PrismaModel> | null
    not?: NestedBytesNullableFilter<$PrismaModel> | Buffer | null
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type PackageRatingListRelationFilter = {
    every?: PackageRatingWhereInput
    some?: PackageRatingWhereInput
    none?: PackageRatingWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type PackageRatingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PackageCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    version?: SortOrder
    content?: SortOrder
    url?: SortOrder
    debloat?: SortOrder
    jsProgram?: SortOrder
  }

  export type PackageAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PackageMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    version?: SortOrder
    content?: SortOrder
    url?: SortOrder
    debloat?: SortOrder
    jsProgram?: SortOrder
  }

  export type PackageMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    version?: SortOrder
    content?: SortOrder
    url?: SortOrder
    debloat?: SortOrder
    jsProgram?: SortOrder
  }

  export type PackageSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type BytesNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Buffer | BytesFieldRefInput<$PrismaModel> | null
    in?: Buffer[] | ListBytesFieldRefInput<$PrismaModel> | null
    notIn?: Buffer[] | ListBytesFieldRefInput<$PrismaModel> | null
    not?: NestedBytesNullableWithAggregatesFilter<$PrismaModel> | Buffer | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBytesNullableFilter<$PrismaModel>
    _max?: NestedBytesNullableFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type PackageRelationFilter = {
    is?: PackageWhereInput
    isNot?: PackageWhereInput
  }

  export type PackageRatingCountOrderByAggregateInput = {
    id?: SortOrder
    packageId?: SortOrder
    rampUp?: SortOrder
    correctness?: SortOrder
    busFactor?: SortOrder
    responsiveMaintainer?: SortOrder
    licenseScore?: SortOrder
    netScore?: SortOrder
    rampUpLatency?: SortOrder
    correctnessLatency?: SortOrder
    busFactorLatency?: SortOrder
    responsiveMaintainerLatency?: SortOrder
    licenseScoreLatency?: SortOrder
    netScoreLatency?: SortOrder
  }

  export type PackageRatingAvgOrderByAggregateInput = {
    id?: SortOrder
    packageId?: SortOrder
    rampUp?: SortOrder
    correctness?: SortOrder
    busFactor?: SortOrder
    responsiveMaintainer?: SortOrder
    licenseScore?: SortOrder
    netScore?: SortOrder
    rampUpLatency?: SortOrder
    correctnessLatency?: SortOrder
    busFactorLatency?: SortOrder
    responsiveMaintainerLatency?: SortOrder
    licenseScoreLatency?: SortOrder
    netScoreLatency?: SortOrder
  }

  export type PackageRatingMaxOrderByAggregateInput = {
    id?: SortOrder
    packageId?: SortOrder
    rampUp?: SortOrder
    correctness?: SortOrder
    busFactor?: SortOrder
    responsiveMaintainer?: SortOrder
    licenseScore?: SortOrder
    netScore?: SortOrder
    rampUpLatency?: SortOrder
    correctnessLatency?: SortOrder
    busFactorLatency?: SortOrder
    responsiveMaintainerLatency?: SortOrder
    licenseScoreLatency?: SortOrder
    netScoreLatency?: SortOrder
  }

  export type PackageRatingMinOrderByAggregateInput = {
    id?: SortOrder
    packageId?: SortOrder
    rampUp?: SortOrder
    correctness?: SortOrder
    busFactor?: SortOrder
    responsiveMaintainer?: SortOrder
    licenseScore?: SortOrder
    netScore?: SortOrder
    rampUpLatency?: SortOrder
    correctnessLatency?: SortOrder
    busFactorLatency?: SortOrder
    responsiveMaintainerLatency?: SortOrder
    licenseScoreLatency?: SortOrder
    netScoreLatency?: SortOrder
  }

  export type PackageRatingSumOrderByAggregateInput = {
    id?: SortOrder
    packageId?: SortOrder
    rampUp?: SortOrder
    correctness?: SortOrder
    busFactor?: SortOrder
    responsiveMaintainer?: SortOrder
    licenseScore?: SortOrder
    netScore?: SortOrder
    rampUpLatency?: SortOrder
    correctnessLatency?: SortOrder
    busFactorLatency?: SortOrder
    responsiveMaintainerLatency?: SortOrder
    licenseScoreLatency?: SortOrder
    netScoreLatency?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type PackageRatingCreateNestedManyWithoutPackageInput = {
    create?: XOR<PackageRatingCreateWithoutPackageInput, PackageRatingUncheckedCreateWithoutPackageInput> | PackageRatingCreateWithoutPackageInput[] | PackageRatingUncheckedCreateWithoutPackageInput[]
    connectOrCreate?: PackageRatingCreateOrConnectWithoutPackageInput | PackageRatingCreateOrConnectWithoutPackageInput[]
    createMany?: PackageRatingCreateManyPackageInputEnvelope
    connect?: PackageRatingWhereUniqueInput | PackageRatingWhereUniqueInput[]
  }

  export type PackageRatingUncheckedCreateNestedManyWithoutPackageInput = {
    create?: XOR<PackageRatingCreateWithoutPackageInput, PackageRatingUncheckedCreateWithoutPackageInput> | PackageRatingCreateWithoutPackageInput[] | PackageRatingUncheckedCreateWithoutPackageInput[]
    connectOrCreate?: PackageRatingCreateOrConnectWithoutPackageInput | PackageRatingCreateOrConnectWithoutPackageInput[]
    createMany?: PackageRatingCreateManyPackageInputEnvelope
    connect?: PackageRatingWhereUniqueInput | PackageRatingWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableBytesFieldUpdateOperationsInput = {
    set?: Buffer | null
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type PackageRatingUpdateManyWithoutPackageNestedInput = {
    create?: XOR<PackageRatingCreateWithoutPackageInput, PackageRatingUncheckedCreateWithoutPackageInput> | PackageRatingCreateWithoutPackageInput[] | PackageRatingUncheckedCreateWithoutPackageInput[]
    connectOrCreate?: PackageRatingCreateOrConnectWithoutPackageInput | PackageRatingCreateOrConnectWithoutPackageInput[]
    upsert?: PackageRatingUpsertWithWhereUniqueWithoutPackageInput | PackageRatingUpsertWithWhereUniqueWithoutPackageInput[]
    createMany?: PackageRatingCreateManyPackageInputEnvelope
    set?: PackageRatingWhereUniqueInput | PackageRatingWhereUniqueInput[]
    disconnect?: PackageRatingWhereUniqueInput | PackageRatingWhereUniqueInput[]
    delete?: PackageRatingWhereUniqueInput | PackageRatingWhereUniqueInput[]
    connect?: PackageRatingWhereUniqueInput | PackageRatingWhereUniqueInput[]
    update?: PackageRatingUpdateWithWhereUniqueWithoutPackageInput | PackageRatingUpdateWithWhereUniqueWithoutPackageInput[]
    updateMany?: PackageRatingUpdateManyWithWhereWithoutPackageInput | PackageRatingUpdateManyWithWhereWithoutPackageInput[]
    deleteMany?: PackageRatingScalarWhereInput | PackageRatingScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PackageRatingUncheckedUpdateManyWithoutPackageNestedInput = {
    create?: XOR<PackageRatingCreateWithoutPackageInput, PackageRatingUncheckedCreateWithoutPackageInput> | PackageRatingCreateWithoutPackageInput[] | PackageRatingUncheckedCreateWithoutPackageInput[]
    connectOrCreate?: PackageRatingCreateOrConnectWithoutPackageInput | PackageRatingCreateOrConnectWithoutPackageInput[]
    upsert?: PackageRatingUpsertWithWhereUniqueWithoutPackageInput | PackageRatingUpsertWithWhereUniqueWithoutPackageInput[]
    createMany?: PackageRatingCreateManyPackageInputEnvelope
    set?: PackageRatingWhereUniqueInput | PackageRatingWhereUniqueInput[]
    disconnect?: PackageRatingWhereUniqueInput | PackageRatingWhereUniqueInput[]
    delete?: PackageRatingWhereUniqueInput | PackageRatingWhereUniqueInput[]
    connect?: PackageRatingWhereUniqueInput | PackageRatingWhereUniqueInput[]
    update?: PackageRatingUpdateWithWhereUniqueWithoutPackageInput | PackageRatingUpdateWithWhereUniqueWithoutPackageInput[]
    updateMany?: PackageRatingUpdateManyWithWhereWithoutPackageInput | PackageRatingUpdateManyWithWhereWithoutPackageInput[]
    deleteMany?: PackageRatingScalarWhereInput | PackageRatingScalarWhereInput[]
  }

  export type PackageCreateNestedOneWithoutRatingsInput = {
    create?: XOR<PackageCreateWithoutRatingsInput, PackageUncheckedCreateWithoutRatingsInput>
    connectOrCreate?: PackageCreateOrConnectWithoutRatingsInput
    connect?: PackageWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PackageUpdateOneRequiredWithoutRatingsNestedInput = {
    create?: XOR<PackageCreateWithoutRatingsInput, PackageUncheckedCreateWithoutRatingsInput>
    connectOrCreate?: PackageCreateOrConnectWithoutRatingsInput
    upsert?: PackageUpsertWithoutRatingsInput
    connect?: PackageWhereUniqueInput
    update?: XOR<XOR<PackageUpdateToOneWithWhereWithoutRatingsInput, PackageUpdateWithoutRatingsInput>, PackageUncheckedUpdateWithoutRatingsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedBytesNullableFilter<$PrismaModel = never> = {
    equals?: Buffer | BytesFieldRefInput<$PrismaModel> | null
    in?: Buffer[] | ListBytesFieldRefInput<$PrismaModel> | null
    notIn?: Buffer[] | ListBytesFieldRefInput<$PrismaModel> | null
    not?: NestedBytesNullableFilter<$PrismaModel> | Buffer | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedBytesNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Buffer | BytesFieldRefInput<$PrismaModel> | null
    in?: Buffer[] | ListBytesFieldRefInput<$PrismaModel> | null
    notIn?: Buffer[] | ListBytesFieldRefInput<$PrismaModel> | null
    not?: NestedBytesNullableWithAggregatesFilter<$PrismaModel> | Buffer | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBytesNullableFilter<$PrismaModel>
    _max?: NestedBytesNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type PackageRatingCreateWithoutPackageInput = {
    rampUp: number
    correctness: number
    busFactor: number
    responsiveMaintainer: number
    licenseScore: number
    netScore: number
    rampUpLatency?: number | null
    correctnessLatency?: number | null
    busFactorLatency?: number | null
    responsiveMaintainerLatency?: number | null
    licenseScoreLatency?: number | null
    netScoreLatency?: number | null
  }

  export type PackageRatingUncheckedCreateWithoutPackageInput = {
    id?: number
    rampUp: number
    correctness: number
    busFactor: number
    responsiveMaintainer: number
    licenseScore: number
    netScore: number
    rampUpLatency?: number | null
    correctnessLatency?: number | null
    busFactorLatency?: number | null
    responsiveMaintainerLatency?: number | null
    licenseScoreLatency?: number | null
    netScoreLatency?: number | null
  }

  export type PackageRatingCreateOrConnectWithoutPackageInput = {
    where: PackageRatingWhereUniqueInput
    create: XOR<PackageRatingCreateWithoutPackageInput, PackageRatingUncheckedCreateWithoutPackageInput>
  }

  export type PackageRatingCreateManyPackageInputEnvelope = {
    data: PackageRatingCreateManyPackageInput | PackageRatingCreateManyPackageInput[]
    skipDuplicates?: boolean
  }

  export type PackageRatingUpsertWithWhereUniqueWithoutPackageInput = {
    where: PackageRatingWhereUniqueInput
    update: XOR<PackageRatingUpdateWithoutPackageInput, PackageRatingUncheckedUpdateWithoutPackageInput>
    create: XOR<PackageRatingCreateWithoutPackageInput, PackageRatingUncheckedCreateWithoutPackageInput>
  }

  export type PackageRatingUpdateWithWhereUniqueWithoutPackageInput = {
    where: PackageRatingWhereUniqueInput
    data: XOR<PackageRatingUpdateWithoutPackageInput, PackageRatingUncheckedUpdateWithoutPackageInput>
  }

  export type PackageRatingUpdateManyWithWhereWithoutPackageInput = {
    where: PackageRatingScalarWhereInput
    data: XOR<PackageRatingUpdateManyMutationInput, PackageRatingUncheckedUpdateManyWithoutPackageInput>
  }

  export type PackageRatingScalarWhereInput = {
    AND?: PackageRatingScalarWhereInput | PackageRatingScalarWhereInput[]
    OR?: PackageRatingScalarWhereInput[]
    NOT?: PackageRatingScalarWhereInput | PackageRatingScalarWhereInput[]
    id?: IntFilter<"PackageRating"> | number
    packageId?: IntFilter<"PackageRating"> | number
    rampUp?: FloatFilter<"PackageRating"> | number
    correctness?: FloatFilter<"PackageRating"> | number
    busFactor?: FloatFilter<"PackageRating"> | number
    responsiveMaintainer?: FloatFilter<"PackageRating"> | number
    licenseScore?: FloatFilter<"PackageRating"> | number
    netScore?: FloatFilter<"PackageRating"> | number
    rampUpLatency?: FloatNullableFilter<"PackageRating"> | number | null
    correctnessLatency?: FloatNullableFilter<"PackageRating"> | number | null
    busFactorLatency?: FloatNullableFilter<"PackageRating"> | number | null
    responsiveMaintainerLatency?: FloatNullableFilter<"PackageRating"> | number | null
    licenseScoreLatency?: FloatNullableFilter<"PackageRating"> | number | null
    netScoreLatency?: FloatNullableFilter<"PackageRating"> | number | null
  }

  export type PackageCreateWithoutRatingsInput = {
    name: string
    version: string
    content?: Buffer | null
    url?: string | null
    debloat?: boolean | null
    jsProgram?: string | null
  }

  export type PackageUncheckedCreateWithoutRatingsInput = {
    id?: number
    name: string
    version: string
    content?: Buffer | null
    url?: string | null
    debloat?: boolean | null
    jsProgram?: string | null
  }

  export type PackageCreateOrConnectWithoutRatingsInput = {
    where: PackageWhereUniqueInput
    create: XOR<PackageCreateWithoutRatingsInput, PackageUncheckedCreateWithoutRatingsInput>
  }

  export type PackageUpsertWithoutRatingsInput = {
    update: XOR<PackageUpdateWithoutRatingsInput, PackageUncheckedUpdateWithoutRatingsInput>
    create: XOR<PackageCreateWithoutRatingsInput, PackageUncheckedCreateWithoutRatingsInput>
    where?: PackageWhereInput
  }

  export type PackageUpdateToOneWithWhereWithoutRatingsInput = {
    where?: PackageWhereInput
    data: XOR<PackageUpdateWithoutRatingsInput, PackageUncheckedUpdateWithoutRatingsInput>
  }

  export type PackageUpdateWithoutRatingsInput = {
    name?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    content?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    debloat?: NullableBoolFieldUpdateOperationsInput | boolean | null
    jsProgram?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PackageUncheckedUpdateWithoutRatingsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    content?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    debloat?: NullableBoolFieldUpdateOperationsInput | boolean | null
    jsProgram?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PackageRatingCreateManyPackageInput = {
    id?: number
    rampUp: number
    correctness: number
    busFactor: number
    responsiveMaintainer: number
    licenseScore: number
    netScore: number
    rampUpLatency?: number | null
    correctnessLatency?: number | null
    busFactorLatency?: number | null
    responsiveMaintainerLatency?: number | null
    licenseScoreLatency?: number | null
    netScoreLatency?: number | null
  }

  export type PackageRatingUpdateWithoutPackageInput = {
    rampUp?: FloatFieldUpdateOperationsInput | number
    correctness?: FloatFieldUpdateOperationsInput | number
    busFactor?: FloatFieldUpdateOperationsInput | number
    responsiveMaintainer?: FloatFieldUpdateOperationsInput | number
    licenseScore?: FloatFieldUpdateOperationsInput | number
    netScore?: FloatFieldUpdateOperationsInput | number
    rampUpLatency?: NullableFloatFieldUpdateOperationsInput | number | null
    correctnessLatency?: NullableFloatFieldUpdateOperationsInput | number | null
    busFactorLatency?: NullableFloatFieldUpdateOperationsInput | number | null
    responsiveMaintainerLatency?: NullableFloatFieldUpdateOperationsInput | number | null
    licenseScoreLatency?: NullableFloatFieldUpdateOperationsInput | number | null
    netScoreLatency?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type PackageRatingUncheckedUpdateWithoutPackageInput = {
    id?: IntFieldUpdateOperationsInput | number
    rampUp?: FloatFieldUpdateOperationsInput | number
    correctness?: FloatFieldUpdateOperationsInput | number
    busFactor?: FloatFieldUpdateOperationsInput | number
    responsiveMaintainer?: FloatFieldUpdateOperationsInput | number
    licenseScore?: FloatFieldUpdateOperationsInput | number
    netScore?: FloatFieldUpdateOperationsInput | number
    rampUpLatency?: NullableFloatFieldUpdateOperationsInput | number | null
    correctnessLatency?: NullableFloatFieldUpdateOperationsInput | number | null
    busFactorLatency?: NullableFloatFieldUpdateOperationsInput | number | null
    responsiveMaintainerLatency?: NullableFloatFieldUpdateOperationsInput | number | null
    licenseScoreLatency?: NullableFloatFieldUpdateOperationsInput | number | null
    netScoreLatency?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type PackageRatingUncheckedUpdateManyWithoutPackageInput = {
    id?: IntFieldUpdateOperationsInput | number
    rampUp?: FloatFieldUpdateOperationsInput | number
    correctness?: FloatFieldUpdateOperationsInput | number
    busFactor?: FloatFieldUpdateOperationsInput | number
    responsiveMaintainer?: FloatFieldUpdateOperationsInput | number
    licenseScore?: FloatFieldUpdateOperationsInput | number
    netScore?: FloatFieldUpdateOperationsInput | number
    rampUpLatency?: NullableFloatFieldUpdateOperationsInput | number | null
    correctnessLatency?: NullableFloatFieldUpdateOperationsInput | number | null
    busFactorLatency?: NullableFloatFieldUpdateOperationsInput | number | null
    responsiveMaintainerLatency?: NullableFloatFieldUpdateOperationsInput | number | null
    licenseScoreLatency?: NullableFloatFieldUpdateOperationsInput | number | null
    netScoreLatency?: NullableFloatFieldUpdateOperationsInput | number | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use PackageCountOutputTypeDefaultArgs instead
     */
    export type PackageCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PackageCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PackageDefaultArgs instead
     */
    export type PackageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PackageDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PackageRatingDefaultArgs instead
     */
    export type PackageRatingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PackageRatingDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}